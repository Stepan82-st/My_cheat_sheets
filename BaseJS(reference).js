////////////////////////////////////////////////////////////////////////////////
// Размещение JavaScript кода
////////////////////////////////////////////////////////////////////////////////

// Код включается в HTML-документ из внешних файлов с расширением *.js :
//
//        <!doctype html>
//        <html lang="en">
//        <head>
//              <meta charset="UTF-8">
//              <title>Document</title>
//              <script src="index1.js"></script>
//        </head>
//        <body>
//
//              <script src="index2.js"></script>
//        </body>
//        </html>


// Код включается в HTML-документ между тегами <script></script>  :
//
//        <!doctype html>
//        <html lang="en">
//        <head>
//              <meta charset="UTF-8">
//              <title>Document</title>
//              <script>
//              …
//              </script>
//        </head>
//        <body>
//
//              <script>
//              …
//              </script>
//        </body>
//        </html>

////////////////////////////////////////////////////////////////////////////////
// Переменные
////////////////////////////////////////////////////////////////////////////////

// Синтаксис объявления (var) :
// var имя_переменной;
// var имя_переменной1, имя_переменной2, … имя_переменнойN;

var a;
var myNewA, myNextVar;
console.log(a);
console.log(myNewA);

// Синтаксис операции присваивания значения переменной (=):
// имя_переменной = выражение;

var b;
var color;
b = 547;
color = "red";
console.log(b);
console.log(color);
var a;
var c;
c = 7;
a = 21;
c = a;
console.log(c);

// Синтаксис объявления с инициализацией:
// var имя_переменной = выражение;
// var имя_переменной1 = выражение1, имя_переменной2 = выражение2, …
//                       имя_переменнойN = выражениеN;

var d, k = 120, out = "Lorem", n;
n = "name";
d = n;
console.log(d);

////////////////////////////////////////////////////////////////////////////////
// Операторы
////////////////////////////////////////////////////////////////////////////////

// Арифметические операторы  (+  -  *   /  %  ++  --) :

// операнд1 + операнд2
//
// Сумма значений операнд1 и операнд2

// операнд1 - операнд2
//
// Разность значений операнд1 и операнд2

// операнд1 * операнд2
//
// Произведение значений операнд1 и операнд2

// операнд1 / операнд2
//
// Частное от деления значений операнд1 и операнд2

// операнд1 % операнд2
//
// Остаток от деления значений операнд1 и операнд2

// операнд++
//
// Увеличение операнда на 1.
// Значение данного выражения – значение операнда до увеличения.

// ++операнд
//
// Увеличение операнда на 1.
// Значение данного выражения – значение операнда после увеличения.

// операнд--
//
// Уменьшение операнда на 1.
// Значение данного выражения – значение операнда до уменьшения.

// --операнд
//
// Уменьшение операнда на 1.
// Значение данного выражения – значение операнда после уменьшения.

var m = 7;
var g = 3;
var k;

k = m + g;
console.log(k);
k = m - g;
console.log(k);
k = m * g;
console.log(k);
k = m / g;
console.log(k);
k = m % g;
console.log(k);

m--;
console.log(k);
g++;
console.log(k);

// Операторы отношения (>  <  >=  <=  ===  ==  !==  !=):

// операнд1 > операнд2
//
// Истина, если значение операнд1, больше чем операнд2

// операнд1 < операнд2
//
// Истина, если значение операнд1, меньше чем операнд2

// операнд1>= операнд2
//
// Истина, если значение операнд1, больше или равно чем операнд2

// операнд1 <= операнд2
//
// Истина, если значение операнд1, меньше или равно чем операнд2

// операнд1 === операнд2
//
// Истина, если значение операнд1 строго равно операнд2

// операнд1 == операнд2
//
// Истина, если значение операнд1 равно операнд2

// операнд1!== операнд2
//
// Истина, если значение операнд1 строго не равно операнд2

// операнд1 != операнд2
//
// Истина, если значение операнд1 не равно операнд2

var m = 7;
var g = 3;

var k = (m < g);
console.log(k);
k = (m > g);
console.log(k);
k = (m <= g);
console.log(k);

m = 3;
k = (m >= g);
console.log(k);

m = 5;
k = (m == g);
console.log(k);
k = (m != g);
console.log(k);

var m = "3";
var g = 3;

k = (m == g);
console.log(k);
k = (m != g);
console.log(k);

k = (m === g);
console.log(k);
k = (m !== g);
console.log(k);

// Логические операторы  (&&  ||  !):

// операнд1 && операнд2
//
// Вначале проверяется операнд1; операнд2 проверяется только в том случае,
// если значение операнд1 – истина. Значением выражения является истина,
// если значения операнд1и операнд2 – истина.

// операнд1 || операнд2
//
// Вначале проверяется операнд1; операнд2 проверяется только в том случае,
// если значение операнд1 – ложь. Значением выражения является истина,
// если значения операнд1или операнд2 – истина.

// !операнд
//
// Истина, если значение операнд ложно.

var k;

var m = true;
var g = true;
var s = false;
var t = false;

k = m && g;
console.log(k);
k = m || g;
console.log(k);
k = g && t;
console.log(k);
k = s || g;
console.log(k);
k = s || t;
console.log(k);
k = g && (!t);
console.log(k);

// Конкатенация строк (+):

var tree = "елочка";
var sizeTree = "маленькая";

var l = sizeTree + " " + tree;
console.log(l);

var k = 16;

var f = k + " ворон сидят на проводах";
console.log(f);

////////////////////////////////////////////////////////////////////////////////
// Условные инструкции
////////////////////////////////////////////////////////////////////////////////

// Синтаксис if :
//
//     if (выражение)
//         инструкция
//
// Если выражение истинно, то выполняется инструкция.
// Если выражение ложно, то ничего не делается.
//
//     if (выражение){
//         составная инструкция
//     }
//
// Аналогично для составной инструкции.

var m = 7;
var g = 8;
var k = 4;

if (m > g) {
	k = 5;
}
console.log(k);

g = 3;

if (m > g) {
	k = 5;
}
console.log(k);

// Синтаксис if-else :
//
//     if (выражение)
//         инструкция1
//     else
//         инструкция2
//
// Если выражение истинно, то выполняется инструкция1 и выполнение продолжается
// с инструкции следующей за инструкцией2 (т.е. инструкция2 не выполняется).
// Если выражение ложно то выполняется инструкция2.
//
//     if (выражение) ){
//         составная инструкция
//     }else){
//         составная инструкция
//     }
//
// Аналогично для составной инструкции.

var m = 7;
var g = 3;
var k;

if (m < g) {
	k = 5;
} else if (m == g) {
	k = 1;
} else {
	k = 4;
}
console.log(k);

// Синтаксис switch :
//
//     switch (выражение) {
//
//          case выражение1:
//              инструкции
//              break;
//
//          case выражение2:
//              инструкции
//              break;
//          …
//
//          case выражениеN:
//              инструкции
//              break;
//
//         default:
//             инструкции
//     }
//
// Сравнивает значение выражения с выражениями меток case
// и в случае строгого равенства выполняет инструкции
// которые соответствуют выражению метки case.
// Инструкции, связанные с меткой default, выполняются, если
// значение не одного из выражений меток case не равно значению выражения.
// Если будут выполнены инструкции для некоторого варианта case,
// то далее будут выполняться инструкции всех последующих вариантов до тех пор,
// пока не встретится оператор break. Это позволяет связывать
// одну последовательность инструкций с несколькими вариантами case.

var g = 5;
var k;

switch (g) {
case "next":
	k = "site";
	break;
case 5:
	k = "five";
	break;
case 4.3:
	k = 18;
	break;
default:
	k = "none";
	break;
}
console.log(k);

////////////////////////////////////////////////////////////////////////////////
// Массивы
////////////////////////////////////////////////////////////////////////////////

// Пример создания пустого массива:

var arrA = [];
var arrB = [];
var c = [], m;
m = [];

// Пример инициализации массива:

var arrNew = [1, 80, 37, 2, 0, 40];
var k = ["blue", 27, "red", "dog", 15];
var m = [4, 276, 5], s = ["red", "yellow"];

// Пример чтения элементов массива:

var arrNew = [1, 80, 37, 2, 0, 40];
var f = arrNew[4];
console.log(arrNew[2]);
console.log(f);
console.log(arrNew[8]);

// Пример записи элементов массива:

var m = [28, "black", "Lorem"];
console.log(m);
m[1] = 7;
m[5] = 29;
m[3] = m[2];
console.log(m);

////////////////////////////////////////////////////////////////////////////////
// Ассоциативные массивы
////////////////////////////////////////////////////////////////////////////////

// Пример создания пустого массива:

var array1 = {};

// Пример инициализации массива:

var array2 = {
	first : "white",
	second : 25,
	third : "yellow",
	another : 45,
	last : true
};

// Пример чтения элементов массива:

c = array2["second"];
console.log(c);

k = array2["another"];
console.log(k);

// Пример записи элементов массива:

console.log(array2);
var name1 = "old";
array2[name1] = 98.5;
array2["myText"] = 3;
console.log(array2);

////////////////////////////////////////////////////////////////////////////////
// Циклы
////////////////////////////////////////////////////////////////////////////////

// Синтаксис while :
//     while (выражение)
//         инструкция
//
// Если выражение истинно, то инструкция выполняется до тех пор,
// пока выражение не станет ложным.
// Если выражение ложно, то управление передается следующей инструкции.
//
// Аналогично для составной инструкции:
//
//     while (выражение){
//         составная инструкция
//     }


var i = 0;
while (i < 11) {
	i++;
	console.log(i);
}

// Синтаксис do-while :
//
//     do
//          инструкция
//     while (выражение)
//
// Инструкция выполняется хотя бы один раз. Далее аналогично оператору while,
// при этом в случае с do-while выражение проверяется в конце цикла,
// в случае с while выражение проверяется в начале цикла.
// Если выражение ложно, то управление передается следующей инструкции.
// Аналогично для составной инструкции:
//
//     do{
//         составная инструкция
//     } while (выражение)

var i = 5;

do {
	++i;
	console.log(i);
} while (i < 5);

// Синтаксис for :
//
//     for (выражение1; выражение2; выражение3)
//         инструкция
//
// Выражение1 описывает инициализацию цикла
//     и выполняется один раз перед началом цикла.
// Выражение2 – проверка условия завершения цикла.
//     Если выражение2 истинно, то выполняется инструкция тела цикла for,
//     далее выполняется выражение3, и все повторяется пока выражение2 не станет ложным.
//     Если выражение2 ложно, то цикл заканчивается
//     и выполнение переходит на следующую инструкцию.
// Выражение3 вычисляется после каждой итерации и, как правило, управляет циклом,
//     т.е. выражение3 используется как операнд выражения2.
//
// Аналогично для составной инструкции:
//
//     for (выражение1; выражение2; выражение3){
//          составная инструкция
//     }

var n = 12;

for (var i = 0; i < n; i++) {
	console.log(i);
}

// Выражение1 и выражение3 может состоять из нескольких выражений
// объединенных оператором запятая (,).

for (var i = 1, a = 0, b = 1; i < 100; i = a + b, a = b, b = i) {
	console.log(i);
}

// Синтаксис for-in :
//
//     for (переменная in имя_ассоциативного_массива)
//         инструкция
//
// Переменная – перед каждой итерацией содержит имя очередного элемента
// ассоциативного массива.
// Количество итераций равно количеству элементов ассоциативного массива
//
// Аналогично для составной инструкции:
//
//     for (переменная in имя_ассоциативного_массива){
//         составная инструкция
//     }


var a = {
	Lorem : 28,
	ipsum : true,
	dolor : "Neptune",
	sit : "reddens",
	amet : "pater",
	a : "beneficiorum",
	lenoni : "pedes",
	vero : "rex"
};

var k = "список имен индексов: ";

for (var nam in a) {

	console.log(
		"индекс: " +
		nam +
		" , содержимое: " +
		a[nam]);

	k = k + "\n\t\t\t" + nam;

}

console.log(k);

////////////////////////////////////////////////////////////////////////////////
// Функции
////////////////////////////////////////////////////////////////////////////////

// Синтаксис определения функции function :
//
//     function имя_функции (p1,  p2, … , pN) {
//
//         составная инструкция
//
//         return выражение;
//
//     }
//
// имя_функции – идентификатор определяющий имя функции.
// return – инструкция возвращающая значение выражения при вызове функции.
// p1,  p2, … , pN – параметры функции, являются идентификаторами используемыми
// в теле функции (в составной инструкции, выражении инструкции return),
// и содержат значения переданные из соответствующих аргументов при вызове функции.

function myBestFun(p1, p2) {
	var rez;
	rez = (p1 + p2) / (2 * p2) * (p1 - p2);
	return rez;
}

// Синтаксис вызова функции :
//
//      имя_функции (a1,  a2, … , aN);
//
// a1,  a2, … , aN – аргументы передаваемые функции при вызове.
// Аргументы a1,  a2, … , aN соответствуют параметрам  p1,  p2, … , pN
// согласно номера позиции в списке.

console.log(myBestFun(3, 11.4));
var b = 1.2, m = 10, k = 5;
var c = myBestFun(2.5, b);
console.log(c);
var n = 25 + myBestFun(m, k);
console.log(n);

////////////////////////////////////////////////////////////////////////////////
// Комментарии в коде
////////////////////////////////////////////////////////////////////////////////

// Комментарий текстовым (многострочным) блоком (/* … */) :

/*
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum, error, optio, dolorum, laboriosam excepturi praesentium quisquam tempora dolores aperiam non expedita exercitationem. Magni, natus modi deserunt sequi quasi veritatis aperiam molestias quia facilis est sint quidem minima enim vel laboriosam aut corrupti dignissimos nobis provident.
 */

// Комментарий одной строкой ( //):

// Lorem ipsum dolor sit amet, consectetur adipisicing elit.
