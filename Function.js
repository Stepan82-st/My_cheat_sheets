/////////////////////////////////////////////////////////////
// в JavaScript функции - это не только синтаксические
// конструкции, но и данные, а это означает, что они могут
// присваиваться переменным, храниться в свойствах объектов
// или элементах массивов, передаваться как аргументы
// функциями и т.д. [Флэнаган, 6, с.198]

////////////////////////////////////////////////////////////////////////////////
// определение функции объявлением - Function Declaration //////////////////////
//
// function имя_функции (p1,  p2, ... , pN) {
//
//     /* составная инструкция */
//
//     return /* выражение */;
//
// }

function myBestFunD(p1, p2) {
	var rez;
	rez = (p1 + p2) / (2 * p2) * (p1 - p2);
	return rez;
}

var b = 1.7;
var c = myBestFunD(2.5, b);
console.log(c);

////////////////////////////////////////////////////////////////////////////////
// определение функции выражением - Function Expression ////////////////////////
//
//                  |------- литерал функции -------|
// var имя_функции = function  (p1,  p2, ... , pN) {
//
//                       /* составная инструкция */
//
//                       return /* выражение */;
//
//                   }
//
// литерал функции:
//     анонимная функция — особый вид функций,
//     которые объявляются в месте использования
//     и не получают уникального идентификатора для доступа к ним [wiki].

var myBestFunE = function (p1, p2) {
	var rez;
	rez = (p1 + p2) / (2 * p2) * (p1 - p2);
	return rez;
};

var b = 1.7;
var c = myBestFunE(2.5, b);
console.log(c);

////////////////////////////////////////////////////////////////////////////////
// IIFE - Immediately-Invoked Function Expression //////////////////////////////
// (немедленно вызываемая функция выражение):
//     немедленно вызываемая ("самовызывающаяся") функция – это синтаксическая конструкция,
//     позволяющая вызвать функцию немедленно, в точке ее определения [Стефанов, с.98].
//
// (function(){})(); или (function(){}());
//
// (function  () {
//
//     /* составная инструкция */
//
// })();

var n, m = "global 7";

(function () {

	var n = 4,
	m = 7;

	console.log((n + m) / m);

})();

console.log(n);
console.log(m);

////////////////////////////////////////////////////////////////////////////////
// передача аргументов немедленно вызываемой функции [Стефанов, с.99]: /////////
//
// (function  (p1,  p2, ... , pN) {
//
//     /* составная инструкция */
//
//     return /* выражение */;
//
// })(a1,  a2, ... , aN);
//
// p1 <- a1
// p2 <- a2
// ...
// pN <- aN

var n, m = "global 7";

(function (p1, p2) {

	var n = 4,
	m = 7;

	console.log((n + m) / m);
	console.log("p1: " + p1);
	console.log("p2: " + (p2 || "пусто"));

})(m, n);

console.log(n);
console.log(m);

////////////////////////////////////////////////////////////////////////////////
// функция как аргумент ////////////////////////////////////////////////////////

function formatText(c, d, f) {

	var out = f()[0] + " чисел " + c + " и " + d + " равн" + f()[2] + ": " + f(c, d)[1];

	return out;

}

console.log(formatText(3, 4, sum));
console.log(formatText(5, 43, sbt));
console.log(formatText(98, 78, mlt));
console.log(formatText(12, 5, div));
console.log(formatText(9, 32, sum));
console.log(formatText(1, 7, sbt));

function sum(a, b) {

	a = a || 0;
	b = b || 0;

	var out = a + b;

	return ["сумма", out, "а"];

}

function sbt(a, b) {

	a = a || 0;
	b = b || 0;

	var out = a - b;

	return ["разность", out, "а"];

}

function mlt(a, b) {

	a = a || 0;
	b = b || 0;

	var out = a * b;

	return ["произведение", out, "о"];

}

function div(a, b) {

	a = a || 0;
	b = b || 1;

	var out = a / b;

	return ["частное", out, "о"];

}

///////////////////////////////////////////////////////////////////////////////////////////////////
// вложенные функции - функции определенные в теле других (вмещающих) функций [Флэнаган, 6, с.188].

////////////////////////////////////////////////////////////////////////////////
// функция как возвращаемое значение другой функции ////////////////////////////

var a = funResSum_1(4)(15);
console.log(a);

function funResSum_1(p1){

	function fun(p2){
	
		return p1 + p2;
	
	}

	return fun;

}

var a = funResSum_2(4)[0](15);
console.log(a);
a = funResSum_2(4)[1](15);
console.log(a);
a = funResSum_2(4)[2](15);
console.log(a);
a = funResSum_2(4)[3](15);
console.log(a);

function funResSum_2(p1){

		return [
		function (p2){return p1/p2;},
		function (p2){return p1+p2;},
		function (p2){return p1-p2;},
		function (p2){return p1*p2;},
		];
	
}

var a = funResSum_3(4)["div"](15);
console.log(a);
a = funResSum_3(4)["sum"](15);
console.log(a);
a = funResSum_3(4)["sbt"](15);
console.log(a);
a = funResSum_3(4)["mlt"](15);
console.log(a);

function funResSum_3(p1){

		return {
		"div":function (p2){return p1/p2;},
		"sum":function (p2){return p1+p2;},
		"sbt":function (p2){return p1-p2;},
		"mlt":function (p2){return p1*p2;},
		};
	
}


////////////////////////////////////////////////////////////////////////////////
// функция - замыкание: ////////////////////////////////////////////////////////
//     Замыкания — это функции, ссылающиеся на независимые (свободные) переменные.
//     Другими словами, функция, определенная в замыкании, «запоминает» окружение,
//     в котором она была создана [MDN].
//
// По завершению выполнения функции ее локальные переменные и параметры перестают существовать.
//
// По завершению выполнения функции ее локальные переменные и параметры ПРОДОЛЖАЮТ СУЩЕСТВОВАТЬ,
// сохранять свои значения и продолжают быть доступными для ВЛОЖЕННОЙ ФУНКЦИИ, если вложенная функция
// может быть ВЫЗВАНА В ДРУГОЙ ОБЛАСТИ ВИДИМОСТИ. В этом случае переменные и параметры
// вмещающей функции являются "запоминаемым" [MDN] окружением для вложенной функции.
//
// шаблон реализации:
//
//                        /*  |------------ вмещающая (IIFE) функция ------------| */
// var имя_функции_замыкания = function  (p1,  p2, ... , pN) {
//
//                                 ...
//
//                                   переменные вмещающей функции:
//                                   var v1 = ...;
//                                   var v2 = ...;
//                                   ...
//                                   var vN = ...;
//
//                                    /* |---------- вложенная функция ----------| */
//  /* создание замыкания ----> */ return function () {
//  /* "выход" в другую область   
//     видимости через return   */
//                                                 код с переменными и параметрами
//                                               вмещающей функции:
//
//                                                 v1 ... v2 ... vN ... p1 ... p2 ... pN
//
//                                               ...
//
//                                        };
//
//                             }();


var funNs = function () {
	var var1 = 0;
	console.log("var1 from FunNs() = " + var1++);
};

var funCl = function () {
	var var1 = 0;
	return function () {
		console.log("var1 from FunCl() = " + var1++);
	};
}();

funNs();
funNs();
funNs();
funNs();

funCl();
funCl();
funCl();
funCl();

