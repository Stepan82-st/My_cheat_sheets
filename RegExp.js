////////////////////////////////////////////////////////////////////////////////////
// регулярные выражения для поиска по шаблону //////////////////////////////////////
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_Expressions //
////////////////////////////////////////////////////////////////////////////////////

	// алфавитные символы и цифры в регулярных выражениях соответствуют сами себе
	   
	// неалфавитные символы:
	// \t - табуляция
	// \n - перевод строки
	// \r - возврат каретки
	   
	// наборы символов:
	// [xyz] - любой из символов
	// [^xyz] - любой из символов, не указанных в скобках
	// [a-z] - дефис (-) определяет диапазон
	// [^h-z] - дефис (-) определяет диапазон
	   
	// обозначения классов (наборов) символов:
	// . - любой символ, кроме перевода строки или другого разделителя
	// \w - любой текстовый. Эквивалентно [a-zA-Z0-9_]
	// \W - любой символ, не являющийся текстовым. Эквивалентно [^a-zA-Z0-9_]
	// \s - любой пробельный символ (пробел, табуляция, перевод строки (\r\n), конец страницы, вертикальная табуляция)
	// \S - любой непробельный символ. Обратите внимание, что символы \w и \S – это не одно и то же
	// \d - любые цифры. Эквивалентно [0-9]
	// \D - любой символ, отличный от цифр. Эквивалентно [^0-9]
	   
	// границы:
	// ^ - начало строкового выражения или начало строки при многострочном поиске (флаг m)
	// $ - конец строкового выражения или конец строки при многострочном поиске (флаг m)
	// \B - позиция не являющаяся границей слов
	// \b - граница слова
	   
	// квантификаторы - символы повторения (для предшествующего шаблона):
	// {n,m} - не менее n и не более m раз
	// {n,} - n или более раз
	// {n} - в точности n раз
	// ? - эквивалентно {0,1}
	// + - эквивалентно {1,}
	// * - эквивалентно {0,}
	//
	// "нежадное" минимально возможное повторение:
	// {n,m}? - по минимуму из не менее n и не более m раз
	// {n,}? - по минимуму из n или более раз
	// ?? - по минимуму из эквивалентного {0,1}
	// +? - по минимуму из эквивалентного {1,}
	// *? - по минимуму из эквивалентного {0,}	
	   
	// | - альтернатива (либо подвыражение слева, либо подвыражение справа)
	   
	// (lorem) - группировка в единое целое, которое может использоваться с символами повторения и альтернативы;
	//           или подвыражение которое нумеруется по порядку следования левых скобок
	//           для последующей операции замены

	// Опережающая проверка (ретроспективная в ES5 не поддерживается):
	// (?=p) - справа от текущей позиции в тексте должна находится часть (заключенного в скобки) шаблона поиска p.
	// (?!p) - справа от текущей позиции в тексте НЕ должна находится часть (заключенного в скобки) шаблона поиска p.

	// флаги режима поиска:
	// i - поиск, нечувствительный к регистру
	// g - глобальный поиск, т. е. находит все соответствия, а не останавливается после первого из них
	// m - многострочный режим (^ - начало строки, $ – конец строки)


////////////////////////////////////////////////////////////////////////////////
// встроенная поддержка строк //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

var strEx = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid, neque, saepe, itaque possimus consectetur ratione corporis sunt accusamus quidem impedit alias corrupti labore qui magnam obcaecati id eveniet perferendis velit et amet ipsam totam nesciunt dolorem! Et, molestiae sint illum doloribus eveniet rem dolorum sunt minima dolores in veritatis natus repellendus distinctio est assumenda? Impedit, delectus mollitia numquam unde sed voluptatibus atque dicta porro exercitationem minima voluptate voluptatem a doloremque illum consequatur quo nobis ullam veritatis odit quae quam id repellendus perspiciatis inventore repellat. Sed, aliquid, minima illo veniam hic repellendus id quae voluptas itaque facilis rem facere dignissimos officiis!";

// встроенная поддержка строк //////////////////////////////////////////////////
// метод match() - находит соответствия регулярному выражению;
// возвращает: массив результатов поиска

var a = strEx.match(/\b[mn]+[a-z]+\b/g);

console.log(a);

var a = strEx.match(/\b(mi|ne)+[a-z]+\b/g);

console.log(a);


// "жадное" максимально возможное повторение
var a = strEx.match(/.{1,5}/g);

console.log("жадное:    ",a);

// "нежадное" минимально возможное повторение
var a = strEx.match(/.{1,5}?/g);

console.log("нежадное:    ",a);


// встроенная поддержка строк //////////////////////////////////////////////////
// метод replace() - заменяет подстроки соответствующие регулярному выражению;
// возвращает: строку с результатами замены

////////////////////////////////////////////////////////////////////////////////
// регулярные выражения для замены по шаблону //////////////////////////////////
// 
// Если в строке замены присутствует знак $ с цифрой, 
// метод replace() заменяет эти два символа текстом, 
// соответствующим указанному подвыражению [Флэнаган, с.286].
//
// (lorem) - подвыражение которое нумеруется по порядку следования левых скобок 
//           (если подвыражений несколько или они вложенные) подвыражений
//           для последующей операции замены
// для подвыражений в скобках:
// $1, $2, …, $99 - текст, соответствующий подвыражению 
//                  с номером от 1 до 99 внутри регулярного выражения
// для подстроки:
// $&             - подстрока, соответствующая регулярному выражению 
// $`             - (обратный апостроф) текст слева от найденной подстроки 
// $'             - (апостроф) текст справа от найденной подстроки

var a = strEx.replace(/\b[mn]+[a-z]+\b/g, "\"letter m or n\"");

console.log(a);

var a = strEx.replace(/\b(mi|ne)+[a-z]+\b/g, "-($1)");

console.log(a);

var a = strEx.replace(/\b(mi|ne)+[a-z]+\b/g, function (word) {

		return word + "(?!)";

	});

console.log(a);


// встроенная поддержка строк //////////////////////////////////////////////////
// метод search() - находит соответствие регулярному выражению;
// возвращает: позицию первого вхождения подстроки соответствующей регулярному выражению, в противном случае -1

var a = strEx.search(/\b[m]+[a-z]+\b/g);

console.log(a);

var a = strEx.search(/\b[ё]+[a-z]+\b/g);

console.log(a);


